//inspired by 
//http://little-scale.blogspot.com/2017/12/usb-midi-to-gates-and-sync.html

const int gateOutputs = 8;
byte pitch_table[] = { 0, 255, 1, 255, 2, 3, 255, 4, 255, 5, 255, 255};

int outputPins[gateOutputs] = {0, 1, 2, 3, 4, 5, 6, 7};

int D8 = 8;

byte div_mode = 0;
byte play_flag;
byte reset_flag;
byte clock_tick;

void setup() {
  for (int i = 0; i < gateOutputs; i ++) {
    pinMode(i, OUTPUT);
  }

pinMode (D8, INPUT);

  usbMIDI.setHandleNoteOn(doNoteOn);
  usbMIDI.setHandleNoteOff(doNoteOff);
  usbMIDI.setHandleRealTimeSystem(doClock);

}


void loop() {
  usbMIDI.read();

  if (digitalRead(D8) == HIGH) { // if the gate goes high sync mode
    div_mode = (div_mode + 1) % 3;
   // delay (100);
  }
  
}

void doNoteOn (byte channel, byte pitch, byte velocity) { // when a note on is received, turn the gate on
  pitch = pitch % 12;
  pitch = pitch_table[pitch];
  if (pitch != 255) {
    digitalWriteFast(pitch, velocity);
  }
}


void doNoteOff (byte channel, byte pitch, byte velocity) { // when a note off is received, turn the gate off
  pitch = pitch % 12;
  pitch = pitch_table[pitch];
  if (pitch != 255) {
    digitalWriteFast(pitch, LOW);
  }
}

void doClock (byte clock_byte) {
  if (clock_byte == 250 || clock_byte == 251) { // start byte and continue byte
    reset_flag = 1; // set flag for sending pulse on reset pin
    clock_tick = 0;
  }

  else if (clock_byte == 248) { // tick byte

     if (div_mode == 0) { // 4 PPQN i.e. 16ths
      digitalWriteFast(7, 1 - (clock_tick / 3) & 1);
    }

    else if (div_mode == 1) { // 2 PPQN i.e. 8ths
      digitalWriteFast(7, 1 - (clock_tick / 6) & 1);
    }

    else if (div_mode == 2) { // 4 PPQN i.e. 4ths
      digitalWriteFast(7, 1 - (clock_tick / 12) & 1);
    }

    clock_tick ++; // increment clock by one for every click tick byte received

    if (clock_tick == 24) {
      clock_tick = 0;
    }

    if (reset_flag == 1) { // reset pin to remain high for approximately one clock tick
      digitalWriteFast(6, HIGH); 
      reset_flag = 2; 
    }

    else if (reset_flag == 2) { //... reset pin goes low
      digitalWriteFast(6, LOW);
      reset_flag = 0; 
    }
  }  

  else if (clock_byte == 252) { // stop byte
    digitalWriteFast(7, LOW);
    digitalWriteFast(6, LOW);
  }
}
